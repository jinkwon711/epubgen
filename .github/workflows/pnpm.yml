on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_if_version_upgraded:
    name: Check if version upgrade
    # We run this only if it's a push on the default branch or if it's a PR from a
    # branch (meaning not a PR from a fork). It would be more straightforward to test if secrets.NPM_TOKEN is
    # defined but GitHub Action don't allow it yet.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login
    runs-on: ubuntu-latest
    # needs:
    #   - test_node
    #   - test_deno
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{ steps.step1.outputs.is_upgraded_version }}
      is_release_beta: ${{steps.step1.outputs.is_release_beta }}
    steps:
      - uses: garronej/ts-ci@v1.1.2
        id: step1
        with:
          action_name: is_package_json_version_upgraded
          branch: ${{ github.head_ref || github.ref }}

  cache-install-publish:
    name: Cache pnpm install and publish to Github & NPM
    runs-on: ubuntu-latest
    needs:
      - check_if_version_upgraded
    # We create a release only if the version have been upgraded and we are on a default branch
    # PR on the default branch can release beta but not real release
    if: |
      needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true' &&
      (
        github.event_name == 'push' ||
        needs.check_if_version_upgraded.outputs.is_release_beta == 'true'
      )

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - run: rm -r .github
      - run: |
          git branch -d latest || true
          git push origin :latest || true
      - run: |
          git branch latest
          git checkout latest

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org

      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install

      - name: Denoify
        run: |
          pnpm prerelease

      - name: Publish to npm
        run: |
          if [ "$(npm show . version)" = "$VERSION" ]; then
            echo "This version is already published"
            exit 0
          fi
          if [ "$NODE_AUTH_TOKEN" = "" ]; then
            echo "Can't publish on NPM, You must first create a secret called NPM_TOKEN that contains your NPM auth token. https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets"
            false
          fi
          pnpm release

        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}

      - name: Latest branch
        run: |
          git config --global user.name "actions"
          git config --global user.email actions@example.com
          git add -A
          git commit -am "Enabling shorter import paths"
          git push origin latest
          
      - uses: softprops/action-gh-release@v1
        name: Create GitHub release
        with:
          name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
          tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
          target_commitish: latest
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.check_if_version_upgraded.outputs.is_release_beta == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 


